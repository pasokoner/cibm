// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")

  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  ADMIN
  USER
}

enum UserStatus {
  INACTIVE
  ACTIVE
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Transaction   Transaction[]
  role          Roles         @default(USER)
  Check         Check[]
}

model ValidUser {
  id    String @default(cuid())
  email String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FundSection {
  GENERAL
  SEF
  TRUST
}

enum FundStatus {
  ACTIVE
  INACTIVE
}

model Fund {
  id      String      @id @default(uuid())
  section FundSection
  status  FundStatus
  bank    Bank[]
}

model Bank {
  id            String @id @default(uuid())
  name          String
  acronym       String
  endingBalance Float

  fundId      String
  fund        Fund          @relation(fields: [fundId], references: [id], onDelete: Cascade)
  transaction Transaction[]
  Check       Check[]
}

enum Action {
  LOAN
  CASHDEPOSIT
  DIRECT
  EDITLOAN
}

model Transaction {
  id            Int      @id @default(autoincrement())
  amount        Float
  action        Action
  date          DateTime
  payee         String?
  description   String
  dvNumber      String?
  checkNumber   String?
  depositNumber String?
  userId        String
  bankId        String

  bank Bank @relation(fields: [bankId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CheckStatus {
  RELEASED
  UNRELEASED
  CANCELLED
}

model Check {
  id          Int         @id @default(autoincrement())
  amount      Float
  date        DateTime
  payee       String
  description String
  dvNumber    String?
  checkNumber String
  status      CheckStatus
  userId      String
  bankId      String
  updatedAt   DateTime    @updatedAt

  bank Bank @relation(fields: [bankId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
